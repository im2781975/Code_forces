//#include<iostream>
//#include<cstring>
//#include<cstdio>
//#include<string>
//using namespace std;
//void Slove(int k,int n,string s)
//{
//
//}
//int main()
//{
//    int t,n,i;
//    scanf("%d",&t);
//    while(t--)
//    {
//        scanf("%d",&n);
//        cout <<"program sort(input,output);\nvar";
//        string s = "a";
//        for(i = 1; i < n; i++)
//        {
//            s.push_back(',');
//            s.push_back(i + 'a');
//        }
//        cout<<s<<" : integer;\nbegin\n"<<"  readln("<<s<<");";
//        string ch = "a";
//        Slove(1,n,ch);
//        cout << "end."<<endl;
//    }
//    return 0;
//}



//#include<iostream>
//#include<cstdio>
//#include<cstring>
//#include<algorithm>
//using namespace std;
//const int N = 1000005;
//char Neck[N << 1],temp[N << 1];
//int sum[N << 1],Q[N << 1];
//int vis[2][N];
//void Solve(int m,int n,int k)
//{
//    int i;
//    sum[0] = 0;
//    for(i = 1; i <= m; i++)
//    {
//        sum[i] = sum[i-1] + (Neck[i] == 'C' ? 1 : -1);
//    }
//    int head = 0,tail = 0;
//    for(i = 1; i <= m; i++)
//    {
//        while(head < tail && sum[Q[tail-1]] >= sum[i])
//            tail--;
//        Q[tail++] = i;
//        if(i >= n)
//        {
//            while(i - Q[head] >= n)
//                head++;
//            vis[k][i-n] = (sum[i-n] <= sum[Q[head]]);
//        }
//    }
//}
//int main()
//{
//    //freopen("Input.txt","r",stdin);
//    int n,i,len,Len,ncase = 1;
//    scanf("%d",&n);
//    while(n--)
//    {
//        scanf("%s",temp);
//        len = strlen(temp);
//        strcpy(Neck+1,temp);
//        strcat(Neck+1,temp);
//        Len = strlen(Neck+1);
//        memset(vis,0,sizeof(vis));
//        Solve(Len,len,0);
//        reverse(Neck+1,Neck+Len+1);
//        Solve(Len,len,1);
//        int ans = 0;
//        for(i = 1; i <= len; i++)
//        {
//            if(vis[0][i] || vis[1][len-i])
//                ans++;
//        }
//        printf("Case %d: %d\n",ncase++,ans);
//    }
//    return 0;
//}


//#include<iostream>
//#include<cstdio>
//#include<cstring>
//using namespace std;
//const int N = 100005;
//const long long inf = 1 << 31;
//int sum[N],a[N];
//int L,R,Max;
//void Solve(int n,int k)
//{
//    for(i = 0; i < )
//}
//int main()
//{
//    int t,n,k;
//    scanf("%d",&t);
//    while(t--)
//    {
//        scanf("%d%d",&n,&k);
//        sum[0] = 0;
//        for(i = 1; i <= n; i++)
//        {
//            scanf("%d",&a[i]);
//            sum[i] = sum[i-1] + a[i];
//        }
//        for(i = n+1,j = 1; i < n+1+k; i++)
//        {
//            a[i] = a[i-n];
//            sum[i] = sum[i-1] + a[i];
//        }
//        Solve(n,k);
//        printf("%d %d %d\n",Max,L,R);
//    }
//    return 0;
//}



//#include<iostream>
//#include<cstdio>
//#include<cstring>
//#include<set>
//using namespace std;
//const int N = 1000005;
//set<int> S;
//set<int> ::iterator it;
//int Kill[N];
//int main()
//{
//    //freopen("Input.txt","r",stdin);
//    int n,m,i,j,k,l,r,x;
//    while(~scanf("%d%d",&n,&m))
//    {
//        S.clear();
//        for(i = 1; i <= n; i++)
//            S.insert(i);
//        memset(Kill,0,sizeof(Kill));
//        for(i = 0; i < m; i++)
//        {
//            scanf("%d%d%d",&l,&r,&k);
//            it = S.lower_bound(l);
//            while(it != S.end() && *it <= r)
//            {
//                x = *it;
//                it++;
//                if(x != k)
//                {
//                    Kill[x] = k;
//                    S.erase(x);
//                }
//            }
//        }
//        for(i = 1; i <= n; i++)
//            printf("%d ",Kill[i]);
//            puts("");
//    }
//}

//
//#include<iostream>
//#include<cstdio>
//#include<cstring>
//#include<algorithm>
//using namespace std;
//char ch[5];
//int main()
//{
//    while(~scanf("%s",ch))
//    {
//        int k = strlen(ch);
//        next_permutation(ch,ch+k);
//        printf("%s\n",ch);
//    }
//    return 0;
//}



//template<class BidirectionalIterator>
//bool next_permutation(
//    BidirectionalIterator first,
//    BidirectionalIterator last
//)
//{
//    if(first == last)
//        return false; //������
//
//    BidirectionalIterator i = first;
//    ++i;
//    if(i == last)
//        return false;  //һ��Ԫ�أ�û����һ��������
//
//    i = last;
//    --i;
//
//    for(;;)
//    {
//        BidirectionalIterator ii = i;
//        --i;
//        if(*i < *ii)
//        {
//            BidirectionalIterator j = lase;
//            while(!(*i < *--j));
//
//            iter_swap(i, j);
//            reverse(ii, last);
//            return true;
//        }
//
//        if(i == first)
//        {
//            reverse(first, last);  //ȫ���򣬼�Ϊ��С�ֵ����У���cba��Ϊabc
//            return false;
//        }
//    }
//
//}





//#include<iostream>
//#include<cstdio>
//#include<cstring>
//using namespace std;
//
//int dp[8][2];
//
//int digit[10];
//
//int dfs(int len , int state, bool fp)
//{
//    if(!len)
//        return 1;
//    if(!fp && dp[len][state] != -1)
//        return dp[len][state];
//    int ret = 0,fpmax = fp ? digit[len] : 9;
//    for(int i = 0; i <= fpmax; i++)
//    {
//        if(i == 4 || state && i == 2)
//            continue;
//        ret += dfs(len-1,i == 6,fp && i == fpmax);
//    }
//    if(!fp)
//    {
//        dp[len][state] = ret;
//    }
//    return ret;
//}
//
//int f(int x)
//{
//    int len = 0;
//    while(x)
//    {
//        digit[++len] = x % 10;
//        x /= 10;
//    }
//    return dfs(len,0,true);
//}
//
//int main()
//{
//    //freopen("Input.txt","r",stdin);
//    int n,m;
//    memset(dp,-1,sizeof(dp));
//    while(~scanf("%d%d",&n,&m),n+m)
//    {
//        printf("%d\n",f(m)-f(n-1));
//    }
//}


//#include<iostream>
//#include<cstdio>
//#include<cstring>
//using namespace std;
//
//long long dp[100][2];
//
//int digit[100];
//
//long long dfs(int len, int state , bool fp)
//{
//    if(!len)
//        return 1;
//    if(!fp && dp[len][state] != -1)
//        return dp[len][state];
//    long long ret = 0;
//    int fmax = fp ? digit[len] : 9;
//    for(int i = 0; i <= fmax; i++)
//    {
//        if(i == 9 && state)
//            continue;
//        ret += dfs(len-1, i == 4, fp && i == fmax);
//    }
//    if(!fp)
//    {
//        dp[len][state] = ret;
//    }
//    return ret;
//}
//long long f(long long m)
//{
//    int len = 0;
//    while(m)
//    {
//        digit[++len] = m % 10;
//        m /= 10;
//    }
//    return dfs(len,0,true);
//}
//int main()
//{
//    //freopen("Input.txt","r",stdin);
//    int n,i,j,k;
//    long long m;
//    scanf("%d",&n);
//    memset(dp,-1,sizeof(dp));
//    while(n--)
//    {
//        scanf("%I64d",&m);
//       // printf("~  %d\n",f(m));
//        printf("%I64d\n",m+1-f(m));
//    }
//    return 0;
//}

//#include<iostream>
//#include<cstdio>
//#include<cstring>
//#include<map>
//#include<string>
//#include<algorithm>
//using namespace std;
//map<string,int> M;
//struct Node
//{
//    string s;
//    int num;
//}p[10000];
//bool cmp(struct Node p1, struct Node p2)
//{
//    if(p1.num != p2.num)
//        return p1.num > p2.num;
//    else
//    {
//         return p1.s > p2.s;
//    }
//}
//int main()
//{
//    freopen("Input.txt","r",stdin);
//    int t,i,j,n;
//    char a;
//    scanf("%d",&t);
//    while(t--)
//    {
//        scanf("%d",&n);
//        for(i=0; i<10000; i++)
//        {
//            p[i].num=0;
//            p[i].s="";
//        }
//        getchar();
//        int pos = 0;
//        memset(p,0,sizeof(p));
//        for(i = 0; i < n; i++)
//        {
//            string ch="";
//            while(1)
//            {
//                scanf("%c",&a);
//                printf("~%c\n",a);
//                if(a == '\n')
//                    break;
//                if(a >= 'A' && a <= 'Z')
//                    a = a + 32;
//                if(a >= 'a' && a <= 'z')
//                {
//                   // puts("hi");
//                    ch += a;
//                    cout << ch << endl;
//                }
//                if( a == ' ')
//                {
//                    //cout << ch << endl;
//                   // cout << M[ch] << endl;
//                    if(M[ch] != 0)
//                    {
//
//                        p[M[ch]].num++;
//                    }
//                    else
//                    {
//
//                        M[ch] = ++pos;
//                        //printf("~ %d\n",pos);
//                        cout << ch << endl;
//                        cout<<"I'm here"<<" "<<pos<<endl;
//                        p[pos].s=ch;
//                        puts("hi");
//                        p[pos].num++;
//                    }
//                    ch = "";
//                }
//            }
//           // puts("HI");
//        }
//        sort(p,p+n,cmp);
//        for(i = 0; i < n; i++)
//        {
//            cout << p[i].s<<" " << p[i].num<<endl;
//        }
//    }
//}



//#include<iostream>
//#include<cstdio>
//#include<cstring>
//#include<algorithm>
//
//using namespace std;
//
//pair<int,int> P[100];
//
//struct Node
//{
//    int val,num,SumTime,SubTime;
//    Node() {}
//    Node(int v, int c, int t, int k) :val(v),num(c),SumTime(t),SubTime(k){}
//    Node Solve(int c, int w)
//    {
//        return Node(val+w, num+1, SumTime + SubTime + c, SubTime + c);
//    }
//    bool better(const Node& Q)
//    {
//        if(val != Q.val)
//            return val > Q.val;
//        else
//        {
//            if(num != Q.num)
//                return num > Q.num;
//            else
//            {
//                if(SumTime != Q.SumTime)
//                    return SumTime < Q.SumTime;
//                else
//                {
//                    return SubTime < Q.SubTime;
//                }
//            }
//        }
//    }
//}dp[1005];
//int main()
//{
//    //freopen("Input.txt","r",stdin);
//    int n,m,i,j,V;
//    scanf("%d",&n);
//    while(n--)
//    {
//        memset(dp,0,sizeof(dp));
//        scanf("%d%d",&V,&m);
//        for(i = 0; i < m; i++)
//            scanf("%d",&P[i].first);
//        for(i = 0; i < m; i++)
//            scanf("%d",&P[i].second);
//        sort(P,P+m);
//        for(i = 0; i < m; i++)
//            for(j = V; j >= P[i].first; j--)
//            {
//                Node temp = dp[j - P[i].first].Solve(P[i].first,P[i].second);
//                if(temp.SubTime <= V && temp.better(dp[j]))
//                    dp[j] = temp;
//            }
//        printf("%d %d %d\n",dp[V].val,dp[V].num,dp[V].SumTime);
//    }
//    return 0;
//}


//#include<iostream>
//#include<cstdio>
//#include<cstring>
//#include<algorithm>
//using namespace std;
//int dp[20][20];
//void Solve()
//{
//    int i,j;
//    dp[0][0] = 1;
//    for(i = 1; i <= 10; i++)
//        for(j = 0; j <= 10; j++)
//        {
//            if(i > j)
//                dp[i][j] = dp[i-1][j];
//            else
//                dp[i][j] = dp[i][j-1] + dp[i-1][j];
//        }
//}
//int main()
//{
//    //freopen("Input.txt","r",stdin);
//    int t,n,m,i,j,V;
//    Solve();
//    scanf("%d",&t);
//    while(t--)
//    {
//        scanf("%d%d",&n,&m);
//        printf("%d\n",dp[m][n]);
//    }
//    return 0;
//}


#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int N = 10000;
char a[N];
char num[N];
int main()
{
    int n,m,i,j,ans;
    while(~scanf("%s",a))
    {
        memset(num,0,sizeof(num));
        int len = strlen(a);
        int pos = 0;
        for(i = 0; i < len; i++)
        {
            if(a[i] >= '0' && a[i] <= '3')
            {
                num[pos++] = a[i];
            }
        }
        sort(num,num+pos);
        printf("%c",num[0]);
        for(i = 1; i < pos;i++)
        {
            printf("+%c",num[i]);
        }
        puts("");
    }
    return 0;
}
 
