#define _CRT_SECURE_NO_DEPRECATE

#include <iostream>
#include <algorithm>
#include <math.h>
#include <cmath>
#include <stack>
#include <utility>
#include <cstdlib>
#include <cmath>
#include <regex>
#include <vector>
#include <utility>
#include <iomanip>
#include <cstring>
#include <string>
#include <set>
#include <queue>
#include <queue>
#define MAXN 100005
#define ZERO 0
#define ONE 1
#define TWO 2
#include <unordered_set>
#include <deque>
#include <map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, pll> plll;
typedef pair<ll, ld> pld;
typedef pair<double, pii> pdii;
typedef vector<int> vi;
typedef vector<pii> vii;
typedef vector<piii> viii;
typedef vector<ll> vl;
typedef vector<pll> vll;
typedef vector<plll> vlll;
typedef vector<char> vc;
typedef vector<string> vs;
typedef vector<bool> vb;
typedef vector<vl> vvl;
#define loop(n)          for(int i = 0; i < (n); i++)
#define loop2(n)          for(int j = 0; j < (n); j++)
#define loop1(n)          for(int i = 1; i < (n); i++)
#define lp(x, s, e)      for(int x = (s); x < (e); x++)
#define lpe(x, s, e)     for(int x = (s); x <= (e); x++)
#define for_each(n)     for(auto &it : n)
#define SZ(v) ((int)((v).size()))
#define MP make_pair
#define PB push_back
#define len(s)   (int)s.length()
#define sz(v)    (int)v.size()
#define all(a)   a.begin(),a.end()
#define all_r(a)   a.rbegin(),a.rend()
#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <algorithm>
#include <math.h>
#include <cmath>
#include <utility>
#include <cstdlib>
#include <cmath>
#include <regex>
#include <vector>
#include <utility>
#include <iomanip>
#include <cstring>
#include <string>
#include <set>
#include <deque>


using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

typedef pair<int, int> pii;
typedef pair<int, pii> piii;

typedef pair<ll, ll> pll;
typedef pair<ll, pll> plll;

typedef pair<ll, ld> pld;
typedef pair<double, pii> pdii;

typedef vector<int> vi;
typedef vector<pii> vii;
typedef vector<piii> viii;

typedef vector<ll> vl;
typedef vector<pll> vll;
typedef vector<plll> vlll;
typedef vector<char> vc;
typedef vector<string> vs;
typedef vector<bool> vb;

typedef vector<vl> vvl;
#define loop(n)          for(int i = 0; i < (n); i++)
#define loop2(n)          for(int j = 0; j < (n); j++)
#define loop1(n)          for(int i = 1; i < (n); i++)
#define lp(x, s, e)      for(int x = (s); x < (e); x++)
#define lpe(x, s, e)     for(int x = (s); x <= (e); x++)
#define for_each(n)     for(auto &it : n)
#define SZ(v) ((int)((v).size()))
#define MP make_pair
#define PB push_back
#define len(s)   (int)s.length()
#define sz(v)    (int)v.size()
#define all(a)   a.begin(),a.end()
#define sc second
#define fi first

#define all_r(a)   a.rbegin(),a.rend()


void spd()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
}
void fileIO(void) {
#ifndef ONLINE_JUDGE
    freopen("D:\\CPP\\Problem-Solving-Arena\\in.text", "r", stdin);
    //freopen("D:\\CPP\\Problem-Solving-Arena\\out.txt", "w", stdout);
#endif
}
ll lucky(ll n,ll f,ll s,ll ans){
    if(n<=ans){
        if(f==s){
            return ans;
        }
    }
    if(ans>1e9){
        return 4444477777;
    }
    ll f1 = lucky(n,f+1,s,ans*10+4);
    ll f2 = lucky(n,f,s+1,ans*10+7);
    return min(f1,f2);
}

void right_max(vi&v,int n,int st = 0){
    if(st==n-1){
        return;
    }
    right_max(v,n,st+1);
    v[st] = max(v[st],v[st+1]);
}

//void right_max(vi&v,int n){
//    if(n==0){
//        return ;
//    }
//
//    v[n-1] = max(v[n],v[n-1]);
//    right_max(v,n-1);
//}
// int suffix(vi&v,int n,int N){
//     if(N==0){
//         return 0;
//     }
//     return v[n-1]+ suffix(v,n-1,N-1);
// }
// int prefix(vi&v,int n,int N){
// if(N==0){
//     return 0;
// }
// return v[N-1]+ prefix(v,n,N-1);
// }

// bool is_palindrome(vi&v,int n,int st = 0){
//     if(st==n){
//         return true;
//     }
//   if(v[st]!=v[n]){
//       return false;
//   }
//   if(st<n+1){
//       return is_palindrome(v,n-1,st+1);
//   }
// }
// bool is_pre(string s,string p,int st = 0){
//     if(st == p.size())return true;
//     if(s[st]!=p[st])return false;
//     if(p.size()==0)return true;
//     return is_pre(s,p,st+1);
// }
// bool is_prime(int n,int st = 2){
//     if(n<=2){
//         return true;
//     }
//     if(st>sqrt(n)){
//         return true;
//     }
//     if(n%st == 0)return false;
//     return is_prime(n,st+1);
// }

// int count_prime(int st,int ed){
//     if(st>ed){
//         return 0;
//     }
//     if(is_prime(st)){
//         return 1 + count_prime(st+1,ed);
//     }
//     return count_prime(st+1,ed);
// }

// int path_sum(int grid[100][100], int row, int col, int ROWS, int COLS) {
//     // base case: if robot reaches last row or column, return the value at that cell
//     if (row == ROWS - 1 && col == COLS - 1) {
//         return grid[row][col];
//     }

//     // check if robot can move right
//     int right_sum = -1;
//     if (col < COLS - 1) {
//         right_sum = grid[row][col] + path_sum(grid, row, col + 1, ROWS, COLS);
//     }

//     // check if robot can move bottom
//     int bottom_sum = -1;
//     if (row < ROWS - 1) {
//         bottom_sum = grid[row][col] + path_sum(grid, row + 1, col, ROWS, COLS);
//     }

//     // check if robot can move diagonal
//     int diagonal_sum = -1;
//     if (row < ROWS - 1 && col < COLS - 1) {
//         diagonal_sum = grid[row][col] + path_sum(grid, row + 1, col + 1, ROWS, COLS);
//     }

//     // choose the maximum direction
//     int max_sum = max(right_sum, max(bottom_sum, diagonal_sum));

//     return max_sum;
// }
#include <list>
// bool is_prime(int n) {
//     if (n <= 1) return false;
//     int sqrtn = sqrt(n);
//     for (int i = 2; i <= sqrtn; i++) {
//         if (n % i == 0) {
//             return false;
//         }
//     }
//     return true;
// }

int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}

int lcm(int a, int b) {
    return a / gcd(a, b) * b;
}
bool pal(string str) {
    string rev = str;
    reverse(rev.begin(), rev.end());
    return str == rev;
}
bool is_prime(int n) {
    if (n <= 1) {
        return false;
    }
    for (int i = 2; i <= sqrt(n); ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}
int p(int n) {
    int cnt = 0;
    if (n <= 1) {
        return false;
    }
    for (int i = 1; i <= n; ++i) {
        if (n % i == 0) {
            cnt++;
            if (cnt>3) return 0;
        }
    }
    return cnt;
}
vector<int> sieve(int n) {
    vector<bool> prime(n + 1, true);
    prime[0] = prime[1] = false;
    for (int i = 2; i * i <= n; ++i) {
        if (prime[i]) {
            for (int j = i * i; j <= n; j += i) {
                prime[j] = false;
            }
        }
    }
    vector<int> primes;
    for (int i = 2; i <= n; ++i) {
        if (prime[i]) {
            primes.push_back(i);
        }
    }
    return primes;
}
struct Employee {
    string name;
    int salary;
};

bool compare(Employee e1, Employee e2) {
    if (e1.salary != e2.salary) {
        return e1.salary > e2.salary;
    } else {
        return e1.name < e2.name;
    }
}
//const int MAXN = 1e5+5;
//int freq[MAXN] = {0};


//bool isProperlyNested(string s) {
//    stack<char> st;
//    for (char c : s) {
//        if (c == '(' || c == '[' || c == '{') {
//            st.push(c);
//        } else {
//            if (st.empty()) {
//                return false;
//            }
//            char top = st.top();
//            st.pop();
//            if ((c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{')) {
//                return false;
//            }
//        }
//    }
//    return st.empty();
//}


//int v[N], cnt[N], n;


#define MAX_N 100001

using namespace std;

//int a[MAX_N];

#define ll long long
#define endl '\n'
#define pii pair<int,int>
#define fi first
#define se second
#define pb push_back
using namespace std;

//
//int count_zeroes(const vector<int>& v) {
//    int count = 0;
//    for(int i = 0; i < v.size(); i++) {
//        if(v[i] == 0) {
//            count++;
//        }
//    }
//    return count;
//}
//
//int count_ones(const vector<int>& v) {
//    int count = 0;
//    for(int i = 0; i < v.size(); i++) {
//        if(v[i] == 1) {
//            count++;
//        }
//    }
//    return count;
//}
//
//int solve(const vector<int>& v) {
//    int num_zeroes = count_zeroes(v);
//    int num_ones = count_ones(v);
//
//    if(num_zeroes <= (v.size() + 1) / 2) {
//        return 0;
//    } else if(num_zeroes + num_ones == v.size() && num_ones > 0) {
//        return 2;
//    } else {
//        return 1;
//    }
//}
bool is_palindrome(const string& s) {
    for (int i = 0; i < s.size() / 2; ++i) {
        if (s[i] != s[s.size() - i - 1]) {
            return false;
        }
    }
    return true;
}
struct Test {
    int x,y;
    string num;
};


//const int MAXN = 105;

bool has_four(long long x) {
    while (x > 0) {
        if (x % 10 == 4) {
            return true;
        }
        x /= 10;
    }
    return false;
}

long long count_living(int n) {
    long long count = 1;
    for (int i = 0; i < n; i++) {
        count *= 9;
    }
    return count;
}

long long nth_living(long long k) {
    int n = 1;
    while (true) {
        long long count = count_living(n);
        if (k <= count) {
            break;
        }
        k -= count;
        n++;
    }
    long long x = pow(10, n-1);
    while (k > 1) {
        x++;
        if (!has_four(x)) {
            k--;
        }
    }
    return x;
}


int main() {
int n;cin>>n;
vc v(n);
loop(n){
    cin>>v[i];
}
int cnt = 0 ;
loop(n-1){
    if(v[i]==v[i+1])cnt++;
}
cout<<cnt;

    return 0;
}
