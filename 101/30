#include <iostream>
#include<iomanip>
#include<vector>
#include<math.h>
#include<string>
#include<algorithm>
#include<iomanip>
#include<unordered_set>
#include<unordered_map>
#include<stack>
using namespace std;

#include <bits/stdc++.h>



/*
PROBLEM :- Given the time in numerals  convert it into words :
eg: - time/words :-
             5:00 --> five o' clock
             5:01 --> one minute past five 
             5:10 --> ten minute past five 
             5:15 --> quarter past five
             5:30 --> half past five 
             5:40 --> twenty minutes to six
             5:45 --> quarter to six
             5:47 --> thirteen minutes to six
             5:28 --> twenty eight minute past five
 */







// void f(int h,int m){
//     unordered_map<int,string> um;

//     // Creating a big map
//     if(true){
//     um[1] = "one";
//     um[2] = "two";
//     um[3] = "three";
//     um[4] = "four";
//     um[5] = "five";
//     um[6] = "six";
//     um[7] = "seven";
//     um[8] = "eight";
//     um[9] = "nine";
//     um[10] = "ten";
//     um[11] = "eleven";
//     um[12] = "twelve";
//     um[13] = "thirteen";
//     um[14] = "fourteen";
//     um[15] = "quarter";
//     um[16] = "sixteen";
//     um[17] = "seventeen";
//     um[18] = "eighteen";
//     um[19] = "nineteen";
//     um[20] = "twenty";
//     um[21] = "twenty one";
//     um[22] = "twenty two";
//     um[23] = "twenty three";
//     um[24] = "twenty four";
//     um[25] = "twenty five";
//     um[26] = "twenty six";
//     um[27] = "twenty seven";
//     um[28] = "twenty eight";
//     um[29] = "twenty nine";
//     um[30] = "half";
//     }

//     if (m==0){
//         string ans = um[h]+" o' clock";
//         cout<<ans;
//         return;
//     }

//     if (m>0 && m<=30){
//         if (m==15){
//             string ans = "quarter past "+um[h];
//         cout<<ans;
//         return;
//         }
//         else if (m==30){
//             string ans = "half past "+um[h];
//         cout<<ans;
//         return;
//         }
//         else{
//             string ans = um[m]+" minutes past "+um[h];
//         cout<<ans;
//         return;
//         }
//     }
//     else{
//         m=60-m;
//         if (m==15){
//             string ans = "quarter to "+um[h+1];
//         cout<<ans;
//         return;
//         }
//         else{
//             string ans = um[m]+" minutes to "+um[h+1];
//         cout<<ans;
//         return;
//         }
//     }

// }

// int main()
// {
//     int h=1;
//     int m=1;
//     f(h,m);
//     return 0;
// // }
// void f(int n){
//     int c=0;
//     for (int i=1;;i+=2){
//         if (c==n){
//             break;
//         }
//         if(c%2!=0){
//         cout<<i+1<<" ";
            
//         }
//         else{
//             cout<<i<<" ";
//         }
//         c++;
//     }
//     cout<<endl;
// }

// void workbook(int n,int k,int arr[]){
//     int page =1 ;
//     int sp=0;
//     for (int i=0;i<n;i++){
//         bool f = false;
//         for(int j=1;j<=arr[i];j++){
//             cout<<"Chapter : "<<i+1<<" , Problem "<<j<<" on page no. "<<page<<endl; 
//             if (page==j){
//                 sp++;
//                 cout<<"yeahhhh"<<endl;
//             }
//             //c++;
//            if (j%k==0){
//                page++;
//                if (j==arr[i]){
//                    f=true;
//                }
//            }
//         }
//         if (!f){page++;}
       
//         cout<<endl; 
//     }
//     cout<<sp;
// }

// int main() {
//     int n =5;
//     int k=3;
//     int arr[]={4,2,6,1,10};
//     workbook(n,k,arr);
//     return 0;
// }



// int lis(int arr[],int n){
//     cout<<"This is called for an array "<<endl;
//     int ans = INT16_MIN;
//     int c= 1;
//     for (int i=1;i<n;i++){
//         if (arr[i]>=arr[i-1]){
//             c++;
//             cout<<c<<endl;
//             ans  = max(ans,c);
//         }
//         else{
//             c=1;
//         }
//     }
//     return ans;
// }

// int main() {
// 	// your code goes here
// 	int t;
// 	cin>>t;
// 	while(t--){
// 	    int n,m;
// 	    cin>>n>>m;
// 	    int arr1[n],arr2[m];
//         cout<<"enter for array 1 "<<endl;
// 	    for (int i=0;i<n;i++){
// 	        cin>>arr1[i];
// 	    }
//         cout<<"enter for array 2 "<<endl;

// 	    for (int i=0;i<m;i++){
// 	        cin>>arr2[i];
// 	    }
// 	    // longest non-decreasing subsequence in both the arrays combined (elements order same)
// 	    cout<<lis(arr1,n)+lis(arr2,m)<<endl;
// 	}
// 	return 0;
// }


// void flatlandSpaceStations(int n, vector<int> c) {
//     unordered_set <int> s(c.begin(),c.end());
//     int m;
//     int ans = INT16_MIN;
//     for (int i=0;i<n;i++){
//         cout<<"for city "<<i;
//         if (s.find(i)!=s.end()){
//             m=0;
//              if (m>ans){
//             ans = m+1;
//         }
//         continue;
//         }
//         int l,r,j;
//         for ( j=i+1;j<n;j++){
//             if (s.find(j)!=s.end()){
//                 break;
//             }
//             //r++;
            
//         }
//         r = j-i;
        
//         cout<<" , right closest space station is at "<<r<<" distance";
//         for ( j=i-1;j>=0;j--){
//             if (s.find(j)!=s.end()){
//                 break;
//             }
//             //l++;
//         } 
//         l =  i-j;
//         cout<<" , left closest space station is at "<<l+1<<" distance";

//         if (r<l){
//             m=r;
//         }
//         else{
//             m=l;
//         }
//         cout<<"So nearest is at distance : "<<m<<endl;
//         if (m>ans){
//             ans = m+1;
//         }    
//     }
    
//     cout<<"final answer is --> "<<ans;

// }

// int maxvac_before_removing(char arr[],int n,int x){
//     int c=0;
//     int z=0;
//     for (int i=0;i<n;i++){
//         if (arr[i]=='0'){
//             z++;
//             if (z%x==0){
//                 c++;
//                 cout<<"abhi c is : "<<c<<endl;
//             }
//         }
//         else{
//             z=0;
//         }
//     }
//     return c;
// }

// // int main(){
// //     int t;
// //     cin>>t;
// //     while(t--){
// //         int ans = INT16_MIN;
// //         int n,x;
// //         cin>>n>>x;
// //         int arr[n];
// //         vector <int> ones;
// //         for (int i=0;i<n;i++){
// //             // 0 or 1 only
// //            cin>>arr[i];
// //            if (arr[i]==1){
// //                ones.push_back(i);
// //            }
// //         }
// //         // now removing ones one-by-one.
// //         for (auto x:ones){
// //             arr[x]=0;
// //             ans = max(ans,maxvac(arr,n,x));
// //             arr[x]=1;
// //         }
// //         cout<<"my answer is : ";
// //         cout<<ans;
// //         //cout<<x-1<<" "<<x<<" "<<x+1<<endl;
// //     }
// //     return 0;
// // }

// int main(){
//     string a;
//     int x;
//     cout<<"Enter the binary string : "<<endl;
//     cin>>a;
//     cout<<"Enter x : "<<endl;
//     cin>>x;  
//     char arr[a.size()];
//     for (int i=0;i<a.size();i++){
//         arr[i] = (a[i]);
//     }
//     int ans=0;
//     vector <string> st;
//     ans+=maxvac_before_removing(arr,a.size(),x);
//     cout<<"abhi answer is : "<<ans<<endl;

//     if ((a.size() - ans*x)>=x)
//     {
//     string s="";
//     for (int i=0;i<x;i++){
//         s+="0";
//     }
//     for(int i=0;i<s.size();i++){
//         s[i]='1';
//         st.push_back(s);
//         s[i]='0';
//     }
//     for (int i=0;i<st.size();i++){
//         if (a.find(st[i])){
//             cout<<"mila sala"<<endl;
//             ans++;
//             break;
//         }
//     }
//     }

// cout<<"final answer is  : "<<ans;
//     }

// vector <int> next_city(vector <int> ce,int n){
//     //int arr[n];
//     unordered_set <int> c(ce.begin(),ce.end());
//     vector <int> vec;
//     stack <int> s;
//     // I am doing some preprocessing for the first element i have in my hand
//     vec.push_back(-1);
//      if (c.find(n-1)!=c.end()){
//             s.push(n-1);
//         }

    
//     //s.push(-1);
//     for (int i=n-2;i>=0;i--){
//         if (s.empty()){
//             vec.push_back(-1);
//         }
//         else{
//             vec.push_back(s.top());
//         }
//         if (c.find(i)!=c.end()){
//             s.push(i);
//         }
//     }
//     // printing the answer vector 
//     reverse(vec.begin(),vec.end());
//    //return vec;
//   return vec;

// }
 
// vector <int> prev_city(vector <int> ce,int n){
//     //int arr[n];
//     unordered_set <int> c(ce.begin(),ce.end());
//     vector <int> vec;
// stack <int> s;
//     // I am doing some preprocessing for the first element i have in my hand
//     vec.push_back(-1);
//      if (c.find(0)!=c.end()){
//             s.push(0);
//         }

    
//     //s.push(-1);
//     for (int i=1;i<n;i++){
//         if (s.empty()){
//             vec.push_back(-1);
//         }
//         else{
//             vec.push_back(s.top());
//         }
//         if (c.find(i)!=c.end()){
//             s.push(i);
//         }
//     }
//     // printing the answer vector 
//    return vec;

// }



//  int f(vector <int> c,int n){
//      vector  <int> prevs = prev_city(c,n);
//      vector  <int> nexts = next_city(c,n);
//      unordered_set <int> s(c.begin(),c.end());
//      int ans = INT16_MIN;
//      for (int i=0;i<n;i++){
//         int p = ((prevs[i]==-1)?0:i-prevs[i]);
//         int q = ((nexts[i]==-1)?0:nexts[i]-i);
//         if (s.find(i)!=s.end()){
//             p=0;
//         }

//          ans = max(ans,min(p,q));
//          cout<<"answer is currently : "<<ans<<endl;
//     }
//     cout<<endl;
//     return ans;
//  }



// int main(){

//     // // taking inputs 
//     // int n;
//     // cin>>n;
//     // // how many cities have space stations
//     // int no_c;
//     // cin>>no_c;
//     // vector <int> c;
//     // for (int i=0;i<no_c;i++){
//     //     int x;
//     //     cin>>x;
//     //     c.push_back(x);
//     // }

//     // // calling the solution function 
//     // f(c,n);



//     vector <int> c;
//     c.push_back(1);
//     c.push_back(6);
//     c.push_back(10);
//     c.push_back(11);
//     c.push_back(13);
    


//     cout<<f(c,20);

//     return 0;
// }

// 6
// 3 5
// 380
// 3 9
// 380
// 4 2
// 0123
// 5 13
// 78712
// 6 10
// 051827
// 8 25
// 37159725


// void f(string s,int n,int k){
//     int arr[n];
//     for (int i=0;i<n;i++){
//        // int curr_num = stoi(s[i]);
//         char x = s[i];    
//         int curr_num = (int)x  - 48;    
//         int curr_diff = (10 - curr_num)%10;
//         arr[i] = curr_diff;
//     }

//     for (int i=0;i<n;i++){
//         cout<<arr[i]<<" ";
//     }
//     cout<<endl;
//     int max_z = 0;
//     // if (arr[0]>k){
//     //     cout<<0
//     // }
//     for (int i=0;i<n;i++){
//          k=k-arr[i];
//          cout<<"k is : "<<k<<endl;
//         if (k<0){
//              break;
//         }
//         else{
//            // k=k-arr[i];
//             //cout<<"k is "<<k<<endl;
//             max_z++;
//             //cout<<"max_z is  "<<max_z<<endl;
//         }
//     }
//     cout<<max_z<<endl;
    
// }


// int main() {
//     //  int t;
//     //  cin>>t;
//     //  while(t--){
//     //      int n,k;
//     //      cin>>n>>k;
//     //      string s;
//     //      cin>>s;
//     //      f(s,n,k);
//     //  }   


//     // string s="184601";
//     // char x = s[4];
//     // cout<<(int)s[3] - 48;



//     return 0;

// // }
// bool sortbysec(const pair<int,int> &a,
//               const pair<int,int> &b)
// {
//     return (a.second < b.second);
// }

//  void activitySelection(vector<int> start, vector<int> end, int n)
//     {
//         vector  <pair <int,int> > v;
//         for (int i=0;i<n;i++){
//             v.insert(make_pair(start[i],end[i]));
//         }
//         sort(v.begin(), v.end(), sortbysec);
//         int ans =1;
//         //start[i]>=end[i-1]
//         for (int i =1 ;i<n;i++){
//             if (v[i].first>=v[i-1].second){
//                 ans++;
//             }
//         }
//         cout<<ans;
//         // Your code here
//     }


// void ispar(string x)
//     {
//         stack <char> s;
//         for (int i=0;i<x.size();i++){
//             char c=x[i];
//             cout<<"abhi "<<c<<" pkda h :"<<endl;
//             if (c=='(' || c=='{' || c=='['){
//                 cout<<"adding "<<c<<" to the stack"<<endl;
//                 s.push(c);
//             }
//             else {
//                 cout<<"upar vala abhi "<<s.top()<<endl;
//                 if (c!=s.top()){
//                     cout<<"ni h bhai ";
//                     break;
//                 }
//                 else{
//                     s.pop();
//                 }
//             }
//         }
//         cout<<"Congrats";
//         // Your code here
//     }
//     int main(){
//     // string a ="adv";
//     // cout<<reverse(a.begin(),a.end());
//     string a = "{([])}";
//     ispar(a);
//         return 0;
//     }

// stack <int> aux;

// void _getMinAtPop(stack<int>s)
// {
//     while(!s.empty())
// {    if (s.top()==aux.top()){
//         int res = s.top();
//         //s.pop();
//         aux.pop();
//         cout<<res<<" ";
//     }
//     else{
//         cout<<aux.top()<<" ";
//         //s.pop();
//     }
//     s.pop();
// }
//     // your code here
// }

// int main(){
//     stack <int> s;
//     aux.push(1);
//     s.push(1);
//     s.push(2);
//     s.push(3);
//     s.push(4);
//     s.push(5);

//     _getMinAtPop(s);
//     return 0;
// // }

// bool f(int arr[],int k,int n,int H){
//     int hr=0;
//     for (int i=0;i<n;i++){
//        if (arr[i]<=k){
//             hr++;}
//             else{
//                 int x = arr[i]/k;
//                 int m = arr[i]%k;
//                 hr+=(x+m);
//             }
//     }
//     return hr<=H;
// }

// int main(){
//     int t;
//     while(t--){
//         int n,h;
//         cin>>n>>h;
//         for (int i=0;i<n;i++){
//             cin>>arr[i];
//         }
//         sort(arr,arr+n);
//         int l=1,h=1e9;
//         while(l<h){
//             int mid = (l+h)/2;
//             if (f(arr,mid,n,h)){
//                 h=mid;
//             }
//             else{
//                 l=mid+1;
//             }
//         }
//         // either my answer is h banana/hr or l banana/hr
//         if (f(h)){
//             cout<<h<<endl;
//         }
//         else{
//             cout<<l<<endl;
//         }
//     }
//     return 0;
// }






// BINARY SEARCH PROBLEM: 
//   int preced(char x){
//         if (x=='+'|| x=='-'){
//             return 1;
//         }
//         else if(x=='*' || x=='/'){
//             return 2;
//         }
//         else if (x=='^'){
//             return 3;
//         }
//         else if (x=='('){
//             return 0;
//         }
//     }
    
//     void infixToPostfix(string s)
//     {
//         stack <char> st;
//         string ans="";
//         for (auto c:s){
//             cout<<"Evaluating for "<<c<<" : "<<endl;
//             if (((int)c>=(int)'a' && (int)c<=(int)'z') || ((int)c>=(int)'A' && (int)c<=(int)'Z')){
//                 ans+=c;
//                 cout<<ans<<endl;
//             }
//             else{
//                 // operator found 
//                 if (st.empty()){
//                     cout<<"pushing "<<c<<" to the stack"<<endl;
//                     st.push(c);
//                    continue;
//                 }
                
//                 if (c=='('){
//                     cout<<"pushing "<<c<<" to the stack"<<endl;
//                     st.push(c);
//                     continue;
//                 }
//                 else if (c==')'){
//                     while(st.top()!='('){
//                         cout<<"ise nikalde" <<endl;
//                         ans+=st.top();
//                         cout<<"curr answer : "<<ans<<endl;
//                         st.pop();
//                     }
//                     st.pop();
//                     continue;
//                 }
                
//                 while( (st.empty()==false) && (preced(c)<=preced(st.top()))){
//                     ans+=st.top();
//                     cout<<"curr answer : "<<ans<<endl;
//                     st.pop();
//                 }

//                 cout<<"pushing "<<c<<" to the stack"<<endl;
//                 st.push(c);
//             }
//         }
//         while(!st.empty()){
//             ans+=st.top();
//             st.pop();
//         }
//         cout<<"final answer :"<<ans;
//         // Your code here
//     }


//     int main(){
//         // string a = "A*(B+C)/D";
//         // infixToPostfix(a);
//         int i =657;
//         cout<<static_cast<char>(i); 
//         return 0;
//     }








// int main(){
    
//     //cin>>x;
// int x=128;
//     // for (int x= 2;x<100000000;x++);
//     long long co=0;
//     long long a=0;
//     long long b=0;
//     long long c=0;

//     for (int i=0;i<29;i++){
//         long long j = pow(2,i);
//         if (x&j){
//             if (co==0){
//                 //cout<<"c is "<<co<<endl;
//             a+=j;
//             c+=j;
//             }
//             if (co==1){
//                 //cout<<"c is "<<co<<endl;
//             //a+=j;
//             b+=j;
//             c+=j;}
//             if (co==2){
//                 //cout<<"c is "<<co<<endl;

//             b+=j;
//             a+=j;
//             }
//         }
//         else{
//             if (co==2 && i<x && x<100){
//                 //cout<<"c is "<<co<<endl;
//             a+=j;
//             //c+=j;
//             }
//             if (co==1 && i<x && x<100){
//                 //cout<<"c is "<<co<<endl;
//             //a+=j;
//             b+=j;}
//            // c+=j;}
//             if (co==0&& i<x && x<100){
//                 //cout<<"c is "<<co<<endl;

//             c+=j;}
//            // a+=j;}
//         }
//         co=(co+1)%3;
//         }
    

//     cout<<" my answer is :"<<a<<" , "<<b<<" , "<<c<<endl;
//     cout<<"a|b|c : "<<(a|b|c)<<endl;
//     cout<<" proper answer : "<<((a|b)&(b|c)&(c|a))<<endl;
    
   

//  return 0;
//     }






//  static f(Item a,Item b){
//         return (a.weight/a.value) > = (b.weight/b.value)
//     }
//     double fractionalKnapsack(int W, Item arr[], int n)
//     {
//         sort(arr,arr+n,f);
//         // Your code here
//     }

// int main(){

//     int n = 5;
//     int sum= 12;
//     if (sum>9*n){
//             cout<< "-1";
//             return 0;
//         }
//         int arr[5];
//         for (int i=0;i<n;i++){
//             arr[i]=9;
//         }
//          for (int i=0;i<n;i++){
//             cout<<arr[i];
//         }
//         cout<<endl;
//         int hatane = (9*n - sum)/9;
//         cout<<"itne hatane h :"<<hatane<<endl;
//         int lim = n-hatane;
//         int i;
//         for (i=n-1;i>=lim;i--){
//             arr[i]=0;
//         }
//         cout<<" 0 bnane k bad "<<endl;
//         for (int i=0;i<n;i++){
//             cout<<arr[i];
//         }
//         cout<<endl;
//         cout<<"last change to i on : "<<i<<endl;
        
//         int diff = (9*lim - sum);
//         cout<<"diff is  : "<<diff<<endl;

//         arr[i] = 9-diff;
        
//         string ans="";
//         for (int i=0;i<n;i++)
//         {
//             ans+=to_string(arr[i]);
//             cout<<ans<<endl;
//         }
//             cout<<"final anser : "<<ans<<endl;

//     return 0;
// }




int main(){
    int n;
    cin>>n;
    vector <string> v(n);
    for (int i=0;i<n;i++){
        cin>>v[i];
    }
    int x=0;
    for (int i=0;i<n;i++){
        if (v[i][0]=='+' || v[i][1]=='+' || v[i][2]=='+'){
            x++;
        }
        else{
            x--;
        }
    }

    cout<<x;
    return 0;
}
