	#include<iostream>
	#include<string>
	#include<stack>
	#include<limits>
	#include <math.h>
	#include <vector>
	#include<cmath>
	#include<algorithm>
	#include <list>
	#include<queue>
	#include <numeric>
	#include <map>
	#include <deque>
	#include <set>
	#include<fstream>


	using namespace std;

	int MultOfNumbers(int n)
	{
		int mult = 1;
		while (n > 0)
		{
			mult *= n % 10;
			n /= 10;
		}
		return mult;
	}

	int SumOfNumbers(int n)
	{
		int sum = 0;
		while (n > 0)
		{
			sum += n % 10;
			n /= 10;
		}
		return sum;
	}

	int AmountOfNumbers(int n)
	{
		int sum = 0;
		while (n > 0)
		{
			sum++;
			n /= 10;
		}
		return sum;
	}


	double min(double a, double b)
	{
		double min = a < b ? a : b;
		return min;
	}

	double max(double a, double b)
	{
		double max = a > b ? a : b;
		return max;
	}

	double mini(double a, double b, double c)
	{
		double min = a < b ? a < c ? a : c : b < c ? b : c;
		return min;
	}



	string ToCode(double n)
	{
		if (n == 0)
			return "0";
		string s = "";
		string a = "";
		while (n > 0)
		{
			a = to_string(((int)n % 2 == 0) ? 0 : 1);
			n = floor(n / 2);
			s = a + s;
		}
		return s;
	}

	int ToInt(string s)
	{
		int ans = 0;
		for (int i = s.length() - 1; i >= 0; i--) {
			if (s[i] == '1')
				ans += pow(2, s.length() - i - 1);
		}
		return ans;
	}


	int NOD(long long a, long long b)
	{
		while (a > 0 && b > 0)
			if (a > b)
				a %= b;
			else
				b %= a;
		return a + b;
	}



	void quicksort(int *mas, int first, int last)
	{
		int mid, count;
		int f = first, l = last;
		mid = mas[(f + l) / 2]; //���������� �������� ��������
		do
		{
			while (mas[f] < mid) f++;
			while (mas[l] > mid) l--;
			if (f <= l) //������������ ���������
			{
				count = mas[f];
				mas[f] = mas[l];
				mas[l] = count;
				f++;
				l--;
			}
		} while (f < l);
		if (first < l) quicksort(mas, first, l);
		if (f < last) quicksort(mas, f, last);
	}

	int AmountOfZero(int n)
	{
		int sum = 0;
		while (n > 0)
		{
			if (n % 10 != 0)
				return sum;
			if (n % 10 == 0)
				sum++;
			n /= 10;
		}
		return sum;
	}

	void sorte(int **arr, int size)
	{
		int temp; // ��������� ���������� ��� ������ ��������� �������
		int temp2;
		// ���������� ������� ���������
		for (int i = 0; i < size - 1; i++) {
			for (int j = 0; j < size - i - 1; j++) {
				if (arr[j][0] > arr[j + 1][0]) {
					// ������ �������� �������
					temp = arr[j][0];
					temp2 = arr[j][1];
					arr[j][0] = arr[j + 1][0];
					arr[j][1] = arr[j + 1][1];
					arr[j + 1][0] = temp;
					arr[j + 1][1] = temp2;
				}
			}
		}
	}

	bool IsSortedArr(int arr[], int right)
	{
		int temp;
		for (int i = 0; i < right; i++) {
			for (int j = 0; j < right - i; j++) {
				if (arr[j] > arr[j + 1]) {
					return false;
					temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}
		return true;
	}

	int ReverseNumber(long long num)
	{
		int rev = 0;
		while (num > 0)
		{
			rev += num % 10;
			rev *= 10;
			num /= 10;
		}
		rev /= 10;
		return rev;
	}


	string AddTime(string s, int n) {
		string a = "";
		a += s[0];
		a += s[1];
		string b = "";
		b += s[3];
		b += s[4];
		int h = atoi(a.c_str());
		int m = atoi(b.c_str());
		int t = h * 60 + m;
		t += n;
		int hour = t / 60 % 24;
		int min = t % 60;
		string ho = "";
		string mi = "";
		if (hour < 10)
			ho += "0";
		if (min < 10)
			mi += "0";
		ho += to_string(hour);
		mi += to_string(min);
		return ho + ":" + mi;
	}

	long long fac(int n)
	{
		if (n == 1 || n == 0)
			return 1;
		return n * fac(n - 1);
	}

	bool arIsEmpty(int arr[], int n)
	{ 
		int a = arr[0];
		for (int i = 1; i < n; i++)
			if (arr[i] != a)
				return false;
		return true;
	}

	bool IsStep(int x)
	{
		for (int i = 0; i <= x; i++)
		{
			if (pow(2, i) == x)
				return true;
		}
		return false;
	}

	bool HaveNeCh(int n)
	{
		while (n > 0)
		{
			if (n % 2 == 0)
				return false;
			n /= 10;
		}
		return true;
	}

	bool IsDiff(int n)
	{
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				if ((n / (int)pow(10, i)) % 10 == (n / (int)pow(10, j)) % 10&&j!=i)
					return false;
		return true;
	}

	void Swap(int arr[], int right, int left)
	{
		if (left != right)
		{
			int temp = arr[left];
			arr[left] = arr[right];
			arr[right] = temp;
		}
	}

	bool IsGood(long long n)
	{
		while (n > 0)
		{
			if ((n % 10) % 2 == 0)
				return false;
			n /= 10;
		}
		return true;
	}

	bool IsPol(long long n)
	{
		int a[1000];
		int c = 0;
		while (n > 0)
		{
			a[c] = n % 10;
			c++;
			n /= 10;
		}
		if (c % 2 == 0)
		{
			int i = 0;
			int j = c - 1;
			while (i < j)
			{
				if (a[i] != a[j])
					return false;
				i++;
				j--;
			}
		}
		else
		{
			int i = c / 2;
			int j = c / 2;
			while (i>=0&&j<c)
			{
				if (a[i] != a[j])
					return false;
				i--;
				j++;
			}
		}
		return true;
	}

	int BinarySearch(vector<long long> v, int item)
	{
		int low = 0;
		int high = v.size() - 1;
		int mid = NULL;
		int count = 0;
		while (low <= high)
		{
			mid = (low + high) / 2;

			if (v[mid] == item)
			{
				return mid + 1;
			}
			if (v[mid] > item)
			{
				high = mid - 1;
			}
			else
			{
				low = mid + 1;
			}
		}
		return NULL;
	}

	long long Fib(int n)
	{
		if (n == 1)
			return 1;
		if (n == 2)
			return 1;
		return Fib(n -1  ) + Fib(n -2);
	}

	bool Prost(long long n)
	{
		for (long long i = 2; i < n; i++)
		{
			if (n%i == 0)
				return false;
		}
		return true;
	}

	bool Divi_on_11(string s)
	{
		long long sum1 = 0;
		long long sum2 = 0;
		for (int i = 0; i < s.length(); i++)
		{
			if (i % 2 == 0)
				sum1 += s[i] - '0';
			else
				sum2 += s[i] - '0';
		}
		if (sum1 == sum2)
		{
			return true;
			return 0;
		}
		long long ans = abs(sum1 - sum2);
		if (ans % 11 == 0)
			return true;
		return false;
	}

	unsigned long long fib(int n)
	{
		if (n == 0)
			return 1;
		if (n == 1)
			return 1;
		return fib(n - 1) + fib(n - 2);
	}

	bool IsZero(int arr[], int n)
	{
		for (int j = 0; j < n; j++)
		{
			if (arr[j] != 0)
				return false;
		}
		return true;
	}

	long long ToDec(string s,int syst)
	{
		int c = 0;
		long long ans = 0;
		for (int i = s.length() - 1; i >= 0;i--)
		{
			ans += pow(syst, c)*(s[i] - '0');
			c++;
		}
		return ans;
	}

	void Bubble_sort(int arr[], int size)
	{
		for (int i = 0; i < size - 1; i++)
			for (int j = 0; j < size - i - 1; j++)		
				if (arr[j] ==0)
					Swap(arr, j, j + 1);
	}

	void rec(int a, int b)
	{
		if (a < b)
		{
			cout << a << " ";
			return rec(a + 1, b);
		}
		if (a == b)
		{
			cout << a;
			return;
		}
	}

	char Compare(string s1, string s2)
	{
		if (s1.length() < s2.length())
			return '<';
		if (s2.length() < s1.length())
			return '>';
		for (int i = 0; i < s1.length(); i++)
		{
			if (s1[i] > s2[i])
				return '>';
			if (s1[i] < s2[i])
				return '<';
		}
		return '=';
	}
	
	void SortString(string ar[],int n)
	{
		for (int i = 0; i < n; i++)
		{
			for (int i = 0; i < n - 1; i++)
				for (int j = 0; j < n - i - 1; j++)
					if (ar[j] > ar[j + 1])
					{
						string temp = ar[j];
						ar[j] = ar[j + 1];
						ar[j + 1] = temp;
					}
		}
	}

	string Sum(string a, string b)
	{
		vector <int> v1;
		vector <int> v2;
		for (int i = 0; i < a.length(); i++)
		{
			v1.push_back((a[i] - '0'));
		}
		for (int i = 0; i < b.length(); i++)
		{
			v2.push_back((b[i] - '0'));
		}
		reverse(v1.begin(), v1.end());
		reverse(v2.begin(), v2.end());
		int lenght;
		if (v1.size() > v2.size())
			lenght = v1.size() + 1;
		else
			lenght = v2.size() + 1;
		v2.reserve(lenght);
		v1.reserve(lenght);
		for (int ix = 0; ix < lenght; ix++)
		{
			v2[ix] += v1[ix]; 
			v2[ix + 1] += (v2[ix] / 10);
			v2[ix] %= 10; 
		}
		if (v2[v2.size() - 1] == 0)
			v2.erase(v2.end() - 1);
		reverse(v2.begin(), v2.end());
		string aa = "";
		for (int i = 0; i < v2.size(); i++)
			aa += to_string(v2[i]);
		return aa;
	}

	string s = "987";

	long long counte = 0;
	
	bool b = true;
	vector<bool> used(1000, false);

	void recu(int ind,int length,int maxnum,vector<char> v,char arr[])
	{
		if (ind == length)
		{
			string a = "";
			for (int i = 0; i < length; i++)
				a += v[i];
			if (a == s)
			{
				cout << "Success";
				b = false;
			}
			return;
		}
		for (int i = 0; (i < maxnum)&&b; i++)
		{
			v[ind] = arr[i];
			recu(ind + 1, length, maxnum, v, arr);
		}
	}

	int k;
	vector<char> c;
	int q;
	int p;
	bool be = true;

	void Scobka(int ind, int bal) 
	{
		if (ind == k)
		{
			if (bal == 0)
			{
					string a;
					for (int i = 0; i < k; i++)
						a += c[i];
					cout << a << endl;
			}
			return;
		}
 		c[ind] = '(';
		Scobka(ind + 1, bal + 1);
		if (bal == 0)
			return ;
		c[ind] = ')';
		Scobka(ind + 1, bal - 1);
	}

	int main()
	{
		int n;
		cin >> n;
		for (int i = 0; i < n; i++)
		{
			string s;
			cin >> s;
			if (s.length() <= 10)
				cout << s << endl;
			else
			{
				cout << s[0];
				int cnt = 0;
				for (int j = 1; j < s.length() - 1; j++)
					cnt++;
				cout << cnt;
				cout << s[s.length() - 1] << endl;
			}
		}
		return 0;
	}
