
	void quicksort(int *mas, int first, int last)
	{
		int mid, count;
		int f = first, l = last;
		mid = mas[(f + l) / 2]; //���������� �������� ��������
		do
		{
			while (mas[f] < mid) f++;
			while (mas[l] > mid) l--;
			if (f <= l) //������������ ���������
			{
				count = mas[f];
				mas[f] = mas[l];
				mas[l] = count;
				f++;
				l--;
			}
		} while (f < l);
		if (first < l) quicksort(mas, first, l);
		if (f < last) quicksort(mas, f, last);
	}

	

	void sorte(int **arr, int size)
	{
		int temp; // ��������� ���������� ��� ������ ��������� �������
		int temp2;
		// ���������� ������� ���������
		for (int i = 0; i < size - 1; i++) {
			for (int j = 0; j < size - i - 1; j++) {
				if (arr[j][0] > arr[j + 1][0]) {
					// ������ �������� �������
					temp = arr[j][0];
					temp2 = arr[j][1];
					arr[j][0] = arr[j + 1][0];
					arr[j][1] = arr[j + 1][1];
					arr[j + 1][0] = temp;
					arr[j + 1][1] = temp2;
				}
			}
		}
	}

	bool IsSortedArr(int arr[], int right)
	{
		int temp;
		for (int i = 0; i < right; i++) {
			for (int j = 0; j < right - i; j++) {
				if (arr[j] > arr[j + 1]) {
					return false;
					temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}
		return true;
	}

	
	bool arIsEmpty(int arr[], int n)
	{ 
		int a = arr[0];
		for (int i = 1; i < n; i++)
			if (arr[i] != a)
				return false;
		return true;
	}

	bool IsStep(int x)
	{
		for (int i = 0; i <= x; i++)
		{
			if (pow(2, i) == x)
				return true;
		}
		return false;
	}

	

	bool IsDiff(int n)
	{
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				if ((n / (int)pow(10, i)) % 10 == (n / (int)pow(10, j)) % 10&&j!=i)
					return false;
		return true;
	}

	void Swap(int arr[], int right, int left)
	{
		if (left != right)
		{
			int temp = arr[left];
			arr[left] = arr[right];
			arr[right] = temp;
		}
	}

	

	bool IsPol(long long n)
	{
		int a[1000];
		int c = 0;
		while (n > 0)
		{
			a[c] = n % 10;
			c++;
			n /= 10;
		}
		if (c % 2 == 0)
		{
			int i = 0;
			int j = c - 1;
			while (i < j)
			{
				if (a[i] != a[j])
					return false;
				i++;
				j--;
			}
		}
		else
		{
			int i = c / 2;
			int j = c / 2;
			while (i>=0&&j<c)
			{
				if (a[i] != a[j])
					return false;
				i--;
				j++;
			}
		}
		return true;
	}

	int BinarySearch(vector<long long> v, int item)
	{
		int low = 0;
		int high = v.size() - 1;
		int mid = NULL;
		int count = 0;
		while (low <= high)
		{
			mid = (low + high) / 2;

			if (v[mid] == item)
			{
				return mid + 1;
			}
			if (v[mid] > item)
			{
				high = mid - 1;
			}
			else
			{
				low = mid + 1;
			}
		}
		return NULL;
	}

	

	

	bool IsZero(int arr[], int n)
	{
		for (int j = 0; j < n; j++)
		{
			if (arr[j] != 0)
				return false;
		}
		return true;
	}

	
	
	

	string s = "987";

	long long counte = 0;
	
	bool b = true;
	vector<bool> used(1000, false);

	void recu(int ind,int length,int maxnum,vector<char> v,char arr[])
	{
		if (ind == length)
		{
			string a = "";
			for (int i = 0; i < length; i++)
				a += v[i];
			if (a == s)
			{
				cout << "Success";
				b = false;
			}
			return;
		}
		for (int i = 0; (i < maxnum)&&b; i++)
		{
			v[ind] = arr[i];
			recu(ind + 1, length, maxnum, v, arr);
		}
	}

	int k;
	vector<char> c;
	int q;
	int p;
	bool be = true;

	void Scobka(int ind, int bal) 
	{
		if (ind == k)
		{
			if (bal == 0)
			{
					string a;
					for (int i = 0; i < k; i++)
						a += c[i];
					cout << a << endl;
			}
			return;
		}
 		c[ind] = '(';
		Scobka(ind + 1, bal + 1);
		if (bal == 0)
			return ;
		c[ind] = ')';
		Scobka(ind + 1, bal - 1);
	}

	
