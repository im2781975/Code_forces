
//////#include<iostream>
//////int main()
//////{
//////system
//////}
//#include <cmath>
//#include <cstdio>
//#include <cstring>
//#include <iostream>
//#include<string>
//#include<fstream>
//using namespace std;
//const double PI = acos(-1.0);
//
//struct Complex {
//	double x, y;
//
//	Complex(double _x = 0.0, double _y = 0.0) {
//		x = _x;
//		y = _y;
//	}
//
//	Complex operator-(const Complex &b) const {
//		return Complex(x - b.x, y - b.y);
//	}
//
//	Complex operator+(const Complex &b) const {
//		return Complex(x + b.x, y + b.y);
//	}
//
//	Complex operator*(const Complex &b) const {
//		return Complex(x * b.x - y * b.y, x * b.y + y * b.x);
//	}
//};
//
///*

//const int MAXN = 200020;
//Complex x1[MAXN], x2[MAXN];
//int sum[MAXN];
//
//int main() {
//	ifstream cin("1.in");
//	string str1,str2;
//	while (cin>>str1) {
//		str2=str1;
//		int len1 = str1.size();
//		int len2 = str2.size();
//		int len = 1;
//		while (len < len1 * 2 || len < len2 * 2) len <<= 1;
//		for (int i = 0; i < len1; i++) x1[i] = Complex(str1[len1 - 1 - i] - '0', 0);
//		for (int i = len1; i < len; i++) x1[i] = Complex(0, 0);
//		for (int i = 0; i < len2; i++) x2[i] = Complex(str2[len2 - 1 - i] - '0', 0);
//		for (int i = len2; i < len; i++) x2[i] = Complex(0, 0);
//		fft(x1, len, 1);
//		fft(x2, len, 1);
//		for (int i = 0; i < len; i++) x1[i] = x1[i] * x2[i];
//		fft(x1, len, -1);
//		for (int i = 0; i < len; i++) sum[i] = int(x1[i].x + 0.5);
//		for (int i = 0; i < len; i++) {
//			sum[i + 1] += sum[i] / 10;
//			sum[i] %= 10;
//		}
//		len = len1 + len2 - 1;
//		while (sum[len] == 0 && len > 0) len--;
//		for (int i = len; i >= 0; i--)cout<<sum[i];
//		cout<<endl;
//	}
//	return 0;
//}
//#include<iostream>
//#include<algorithm>
//#include<queue>
//#include<string>
//#include<vector>
//using namespace std;
//int main()
//{
//	int n,sh,sm,eh,em;
//	char cc;
//	cin>>sh>>cc>>sm>>eh>>cc>>em>>n;
//	int m=60*(eh-sh)+em-sm,x,y,z;
//	vector<vector<int>> a(1);
//	for(int i=0;i<n;i++)
//	{
//		cin>>x>>y>>z;
//		if(z!=0)
//		{
//			for(int i=1;z>0;i*=2)
//			{
//				vector<int> c(3);
//				c[0]=min(i,z)*x,c[1]=min(i,z)*y,c[2]=1;
//				a.push_back(c);
//				z-=i;
//			}
//		}
//		else
//		{
//			vector<int> c(3);
//			c[0]=x,c[1]=y,c[2]=0;
//			a.push_back(c);
//		}
//	}
//	vector<int> c(m+1);
//	for(int i=1;i<a.size();i++)
//	{
//		//cout<<a[i][0]<<" "<<a[i][1]<<" "<<a[i][2]<<endl;
//		if(a[i][2]==0)
//			for(int j=a[i][0];j<=m;j++)
//				c[j]=max(c[j],c[j-a[i][0]]+a[i][1]);
//		else
//			for(int j=m;j>=a[i][0];j--)
//				c[j]=max(c[j],c[j-a[i][0]]+a[i][1]);
//	}
//	cout<<c[m]<<endl;
//}
//#include<iostream>
//#include<vector>
//#include<cmath>
//#include<iomanip>
//using namespace std;
//int main()
//{
//	cout<<fixed<<setprecision(20)<<acos(-1.0)<<endl;
//	int n,m;
//	cin>>n;
//	vector<int>a(n),c(30);
//	for(int i=0;i<n;i++)cin>>a[i];
//	for(int i=0;i<n;i++)
//	{
//
//	}
//	cout<<(m<2?0:m)<<endl;
//}
//#include<iostream>
//#include<string>
//using namespace std;
//void dfs(string s,int i,int x)
//{
//	if(i==10){
//		cout<<s<<"="<<x<<endl;
//		return ;
//	}
//	dfs(s+(i==1?"":"+")+to_string(i*1LL),i+1,x+i);
//	if(i!=1)
//	dfs(s+(i==1?"":"-")+to_string(i*1LL),i+1,x-i);
//}
//int main()
//{
//	dfs("",1,0);
//}
//#include<iostream>
//using namespace std;
//class tree{
//public:
//	int val;
//	tree *left,*right;
//	static tree* create()
//	{
//		int x;
//		cin>>x;
//		if(x==0)return NULL;
//		tree *p=new tree(x);
//		p->left=create();
//		p->right=create();
//		return p;
//	}
//	void first(tree*p)
//	{
//		if(!p)return ;
//		cout<<p->val<<" ";
//		first(p->left);
//		first(p->right);
//	}
//	void middle(tree*p)
//	{
//		if(!p)return ;
//		first(p->left);
//		cout<<p->val<<" ";
//		first(p->right);
//	}
//	void last(tree*p)
//	{
//		if(!p)return ;
//		first(p->left);
//		first(p->right);
//		cout<<p->val<<" ";
//	}
//	tree(int x)
//	{
//		cout<<"���ǹ��캯��"<<endl;
//		val=x;
//		left=NULL;
//		right=NULL;
//	}
//	~tree()
//	{
//		cout<<"������������"<<endl;
//	}
//};
//int main()
//{
//	tree *p,a(0);
//	p=a.create();
//	//p->first(p);
//	//cout<<endl;
//	//p->middle(p);
//	//cout<<endl;
//	p->last(p);
//}
//#include<iostream>
//#include<string>
//#include<vector>
//#include<stack>
//#include<map>
//using namespace std;
//string sp[1005];
//int ss=0;
//void sss()
//{
//	for(int i=0;i<ss;i++)
//		cout<<sp[i]<<endl;
//}
//class fraction{
//public:
//	long long x,y;
//	long long gcd(long long x,long long y){
//		return y==0?x:gcd(y,x%y);
//	}
//	fraction(long long x)
//	{
//		this->x=x;
//		y=1;
//	}
//	fraction(long long x,long long y)
//	{
//		this->x=x;
//		this->y=y;
//	}
//	void f()
//	{
//		long long c=gcd(x,y);
//		x/=c,y/=c;
//	}
//	void operator -=(fraction a)//x/y-a/b=xb-ay/by
//	{
//		long long c=x,d=y;
//		x=c*a.y-a.x*d;
//		y=d*a.y;
//		f();
//	}
//	void operator +=(fraction a)//x/y-a/b=xb-ay/by
//	{
//		long long c=x,d=y;
//		x=c*a.y+a.x*d;
//		y=d*a.y;
//		f();
//	}
//	void operator *=(fraction a)//x/y-a/b=xb-ay/by
//	{
//		x*=a.x;
//		y*=a.y;
//		f();
//	}
//	fraction operator *(fraction a)//x/y-a/b=xb-ay/by
//	{
//		fraction c(*this);
//		c.x*=a.x;
//		c.y*=a.y;
//		c.f();
//		return c;
//	}
//	fraction operator^(fraction a)
//	{
//		fraction c(*this), e(1,2);
//		if(a.x==0)
//		{
//			fraction c(1);
//			return c;
//		}
//		if(a.x%2==0){
//			a.x/=2;
//			return (c*c)^(a);
//		}
//		else {
//			a.x/=2;
//			return c*((c*c)^(a));
//		}
//	}
//	void operator^=(fraction a)
//	{
//		*this=(*this)^a;
//	}
//	void operator /=(fraction a)//x/y-a/b=xb-ay/by
//	{
//		x*=a.y;
//		y*=a.x;
//		f();
//	}
//	string tostring()
//	{
//		return y!=1?to_string(x)+"/"+to_string(y):to_string(x);
//	}
//};
//void print(vector<fraction>&a)
//{
//	for(int i=0;i<a.size();i++)cout<<a[i].tostring()<<" ";
//	cout<<endl;
//}
//void print(vector<int>&a)
//{
//	for(int i=0;i<a.size();i++)cout<<a[i]<<" ";
//	cout<<endl;
//}
//void print(vector<string>&a)
//{
//	for(int i=0;i<a.size();i++)cout<<a[i]<<" ";
//	cout<<endl;
//}
//int main()//((1+5)*6)+5*9+7/2;
//{
//	map<string,int> m;
//	m["("]=4,m[")"]=0,m["+"]=1,m["-"]=1,m["*"]=2,m["/"]=2,m["#"]=0,m["^"]=3;//m["%"]=2;
//	string s;
//	while(cin>>s){
//		s+="#";
//		vector<fraction> a;
//		vector<string> f,c;
//		for(int i=0,j;i<s.size();i++)
//			if(s[i]>'9'||s[i]<'0')c.push_back(s.substr(i,1));
//			else {
//				for(j=i;j<s.size()&&s[j]>='0'&&s[j]<='9';j++);
//				c.push_back(s.substr(i,j-i));
//				i=j-1;}
//			for(int i=0;i<c.size();i++){
//				if(c[i][0]>='0'&&c[i][0]<='9'){
//					fraction t(stoll(c[i]));
//					a.push_back(t);
//				}
//				else {
//					while(!f.empty()&&m[c[i]]<=m[f.back()]){
//						if(f.back()=="+")a[a.size()-2]+=a.back(),a.pop_back();
//						if(f.back()=="-")a[a.size()-2]-=a.back(),a.pop_back();
//						if(f.back()=="*")a[a.size()-2]*=a.back(),a.pop_back();
//						if(f.back()=="/")a[a.size()-2]/=a.back(),a.pop_back();
//						if(f.back()=="^")a[a.size()-2]^=a.back(),a.pop_back();
//						//if(f.back()=="%")a[a.size()-2]^=a.back(),a.pop_back();
//						if(f.back()=="("){
//							if(c[i]==")")
//								f.pop_back();
//							break;}
//						f.pop_back();
//					}
//					if(c[i]!=")")f.push_back(c[i]);
//				//	print(a);
//				//	print(f);
//				}
//			}
//		sp[ss++]=s.substr(0,s.size()-1)+" = "+a[0].tostring();
//		system("cls");
//		sss();
//	}
//}
//#include <algorithm>
//#include <iostream>
//#include <vector>
//#include <cmath>
//#include<iomanip>
//#include<string>
//#include<queue>
//using namespace std;
//int a[10][10]={};
//int main()
//{
//	queue<pair<int,int>> q;
//	q.push(make_pair(0,0));
//	int k=0;
//	while(!q.empty())
//	{
//		int s=q.size();
//		for(int i=0;i<s;i++)
//		{
//			int x=q.front().first,y=q.front().second;
//			q.pop();
//			if(x<0||y<0||x>=10||y>=10||a[x][y])continue;
//			a[x][y]=k;
//			q.push(make_pair(x+1,y));
//			q.push(make_pair(x-1,y));
//			q.push(make_pair(x,y+1));
//			q.push(make_pair(x,y-1));
//		}
//		k++;
//	}
//	for(int i=0;i<10;i++,cout<<endl)
//		for(int j=0;j<10;j++)
//			cout<<a[i][j]<<" ";
//}
//#include<iostream>
//#include<iomanip>
//using namespace std;
//bool a[10000007];
//int main()
//{
//	fill(&a[0],&a[0]+10000007,1);
//	double start=clock();
//	for(int i=2;i*i<10000007;i++)//3 2*3
//		if(a[i])
//			for(int j=i*i;j<10000007;j+=i)
//				a[j]=0;
//	cout<<0.001*(clock()-start)<<endl;
//}
//#include<iostream>
//#include<algorithm>
//using namespace std;
//int main()
//{
//	int a[]={1,2,2,2,2,4,5};
//	cout<<lower_bound(a,a+8,3)-a<<endl;
//}
//const int N = 300100, P = 1e9+7;
//inline int qpow(int x, int y) {
//	int res(1);
//	while (y) {
//		if (y & 1) res = 1ll * res * x % P;
//		x = 1ll * x * x % P;
//		y >>= 1;
//	}
//	return res;
//}
//void ntt(ll n)
//{
//	ll lim=1;
//	while(lim<(n<<1))lim<<=1;
//	for (int i = 0; i < lim; ++i) r[i] = (i & 1) * (lim >> 1) + (r[i >> 1] >> 1);
//	ntt(a,lim,1);
//	ntt(b,lim,1);
//	for(int i=0;i<lim;i++)c[i]=1LL*a[i]*b[i]%P;
//	ntt(c,lim,-1);
//	int l=1;
//	for(int i=0;i<N;i++)c[i+1]+=c[i]/10,c[i]%=10;
//}
//void slove()//ntt�����˷�
//{
//	ofstream out("1.in"),cout("1.out");
//	ifstream cin("1.in");
//	out<<1;
//	for(int i=1;i<100000;i++)out<<rand()%10;
//	string s,t;
//	while(cin>>s)
//	{
//		fill(a,a+N,0),fill(b,b+N,0),fill(c,c+N,0);
//		for(int i=0;i<s.size();i++)a[i]=s[s.size()-i-1]-'0',b[i]=s[s.size()-i-1]-'0';
//		//for(int i=0;i<t.size();i++)b[i]=t[t.size()-i-1]-'0';
//		ntt(s.size());
//		int tt=0;
//		for(int i=N-1;i>=0;i--)
//		{
//			if(c[i])tt=1;
//			if(tt)cout<<c[i];
//		}
//	}
//}
//void slove()
//{
//	/*ifstream in("C:/Users/86130/Desktop/model.txt");
//	ofstream out("C:/Users/86130/Desktop/�½��ļ���/emmmmm/emmmmm/model.cpp",ios::app);
//	while(!in.eof())
//	{
//		string s;
//		getline(in,s);
//		if(s.find("//")==-1)out<<s<<endl;
//	}*/
//	init();
//	for(int i=1;i<100;i++)cout<<i<<" "<<phi[i]<<endl;
//}
//#include<iostream>
//#include<fstream>
//#include<algorithm>
//#include<vector>
//#include<ctime>
//#include<cstdlib>
//#include<string>
//#include<Windows.h>
//using namespace std;
//class str{
//public:
//	ofstream out;
//	str(string filename){
//		Sleep(1000);
//		out.open(filename);
//		out<<"";
//		out.close();
//		out.open(filename,ios::app);
//		srand(time(0));
//	}
//	string getstr(int x){
//		string c="";
//		for(int i=0;i<x;i++)c+=char('a'+rand()%26);
//		return c;
//	}
//	string tostring(int x){
//		return to_string(1LL*x)+" ";
//	}
//	string tostring(vector<int> a){
//		string c="";
//		for(int i=0;i<a.size();i++)c+=tostring(a[i]);
//	}
//	string tostring(vector<string> a){
//		string c="";
//		for(int i=0;i<a.size();i++)c+=a[i]+'\n';
//		return c;
//	}
//	~str(){
//		out.close();
//	}
//};
//class Solution {
//public:
//    bool is(string s,string t){
//        int i=0,j=0;
//        for(;i<s.size()&&j<t.size();i++)
//            if(j<t.size()&&s[i]==t[j])
//                j++;
//        return j==t.size();
//    }
//    int findLUSlength(vector<string>& strs) {
//        int s=-1;
//        for(int i=0;i<strs.size();i++){
//            int t=1;
//            for(int j=0;j<strs.size();j++){
//                if(j==i)continue;
//                if(is(strs[j],strs[i])){
//                    t=0;
//                    break;
//                }
//            }
//            if(t)s=max(s,int(strs[i].size()));
//        }
//        return s;
//    }
//};
//int main()
//{
//    for (long long int i = 1;i <= 4;i++)
//    {
//        string c = to_string(i) + ".in";
//		string cc=to_string(i)+".out";
//		ifstream cin(c);
//		ofstream cout(cc);
//		int n;
//		cin>>n;
//
//    }
//}
