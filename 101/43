  cout << "Possible" << endl;
  if (r == 1 || c == 1)
  {
   for (int i = 0; i < r; i++)
   {
    cout << vec[i] << endl;
   }
  }
  else
  {
   for (int i = 0; i < r; i++)
   {
    for (int j = 0; j < c; j++)
    {
     cout << '^';
    }
    cout << endl;
   }
  }
 }
 else
 {
  cout << "Impossible" << endl;
 }
}
 
void getIndex(vector<int> v, int K)
{
 auto it = find(v.begin(), v.end(), K);
 
 if (it != v.end())
 {
  int index = it - v.begin();
  cout << index << endl;
 }
 else
 {
  cout << "-1" << endl;
 }
}
 
bool isvowel(char ch)
{
 if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'y')
  return true;
 return false;
}
#define vll vector<ll>
bool isupper(char ch)
{
 return ch >= 'A' && ch <= 'Z';
}
void palta(int a, int b)
{
 int temp = a;
 a = b;
 b = temp;
}
ll countwayssplit3equalsum(vector<ll> a, ll n)
{
 ll cnt[n] = {0}, s = 0;
 
 for (ll i = 0; i < n; i++)
 {
  s += a[i];
 }
 
 if (s % 3 != 0)
  return 0;
 
 s /= 3;
 
 ll ss = 0;
 
 // If the sum of elements from i-th to n-th
 // equals to sum of part putting 1 in cnt
 // array otherwise 0.
 for (ll i = n - 1; i >= 0; i--)
 {
  ss += a[i];
  if (ss == s)
   cnt[i] = 1;
 }
 
 // Calculating the cumulative sum
 // of the array cnt from the last index.
 for (ll i = n - 2; i >= 0; i--)
  cnt[i] += cnt[i + 1];
 
 ll ans = 0;
 ss = 0;
 
 // Calculating answer using original
 // and cnt array.
 for (ll i = 0; i + 2 < n; i++)
 {
  ss += a[i];
  if (ss == s)
   ans += cnt[i + 2];
 }
 return ans;
}
 
bool isPalindrome(string s) {
    return equal(begin(s), end(s), rbegin(s));
}
 
 
void binarybeast880(){
	string s;
	cin>>s;
	vector<char>str;
	for(int i = 0 ; i < s.length() ; i++)
	{
		if(s[i] != '+') str.push_back(s[i]);
	}
	sort(str.begin(), str.end());
//	for(auto it : str) cout<<it<<" ";
    for(int i = 0 ; i < str.size() ; i++)
    {
    	cout<<str[i];
    	if(i != str.size()-1)cout<<'+';
	}
}
 
 
main()
{
 ll t = 1;
// cin >> t;
 for (int i = 1; i <= t; i++)
 {
          //cout << "Case #" << i << ": ";
  binarybeast880();
 }
}
