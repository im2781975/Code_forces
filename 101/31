#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define ld long double
#define __test ll _tc;cin>>_tc;while(_tc--)
#define an "\n"
#define nl cout<<an
#define yes cout<<"YES"<<an
#define no cout<<"NO"<<an
#define ms1 cout<<-1<<an
#define zr0 cout<<0<<an
#define FULL_THROTTLE ios::sync_with_stdio(0); cin.tie(0);cout.tie(0);
#define mod7 1000000007
#define modlu 998244353
#define pb push_back
#define srtf(x_) sort(x_.begin(),x_.end())
#define srtb(x_) sort(x_.begin(),x_.end(),greater<int>())
#define print(__v) for(int __i=0;__i<__v.size();++__i){ cout<<__v[__i]<<" ";}

const int mod=1e9+7;





int getDifferentNumber2(vector<int>&arr) {
      
    int n=arr.size();
    vector<int> b;
    for(int i=0;i<n;i++){
    	b.push_back(arr[i]);
	}
	sort(b.begin(),b.end());
    for (int i=0;i<n;i++) {
      if(b[i]!=i){
        return i;
      }
    }
    return n;
  }


bool is_prime(int num_){
    
     if (num_<=1){
        return false;
    }
    if(num_<=3){
        return true;
    }
    else if(num_%2==0||num_%3==0){
        return false;
    }
    else{
        for(int i=5;i*i<=num_;i+=6){
            if(num_%i==0||num_%(i+2)==0){
                return false;
            }
        }
    }
    return true;
}

bool palin(int arr[],int n){
   
    int flag = 0;
 
    for (int i = 0; i <= n / 2 && n != 0; i++) {
 
        
        if (arr[i] != arr[n - i - 1]) {
           return false;
        }
        return true;
}
}

bool ispow(int y, int x){
    
    int res1 = log(y) / log(x);
    double res2 = log(y) / log(x); 
    return (res1 == res2);
}

static bool srtb2(const pair<int,int> &a,const pair<int,int> &b)
{
    if (a.first < b.first)return false;
    else if (a.first > b.first)return true;
    return a.second < b.second;
}




ll fact(ll n)
{
      if(n==0)
      return 1;
    ll res = 1;
    for (ll i = 2; i <= n; i++)
        res = res * i;
    return res;
}

ll ncr(ll nn,ll mm){
        return (fact(nn)/(fact(nn-mm)*fact(mm)));
}

void prt(ll val,vector<ll>&mul)
{
    
    for (ll i=1; i<=sqrt(val); i++)
    {
        if (val%i == 0)
        {
        
            if (val/i == i)
                mul.push_back(i);
 
            else{
                   mul.push_back(i);
                   mul.push_back(val/i);
            } 
               
        }
    }
}


int cntsubstr(string& str, string& sub)
{
    if (sub.length() == 0) return 0;
    int count = 0;
    for (size_t offset = str.find(sub); offset != std::string::npos;
     offset = str.find(sub, offset + sub.length()))
    {
        ++count;
    }
    return count;
}
ll cntdiv(ll n)
{
   ll cnt = 0;
    for (ll i = 1; i <= sqrt(n); i++) {
        if (n % i == 0) {
            // If divisors are equal,
            // count only one
            if (n / i == i)
                cnt++;
 
            else // Otherwise count both
                cnt = cnt + 2;
        }
    }
    return cnt;
}


int rev(int x)
{
	int y=0;
	for(int i=0;i<8;i++)
		if((x>>i)&1)y^=(1<<(7-i));
	return y;
}
#define ull unsigned long long
 
ull facto(int N)
{
 
   
    ull f = 1; 
 
    
    for (ull i = 2; i <= N; i++)
        f = (1LL*f*i)%1000000007;
 
    return f;
}
bool cp(unsigned long long n)
{
    unsigned long long reverse = 0;
    unsigned long long temp = n;
    while (temp != 0) {
        reverse = (reverse * 10) + (temp % 10);
        temp = temp / 10;
    }
    return (reverse == n); 
}

bool cmp(const std::string& a, const std::string& b)
{
    return (a.size() > b.size()); 
}
ll mo(string num, ll aa)
{
    // Initialize result
    ll res = 0;
 
    // One by one process all digits of 'num'
    for (ll i = 0; i < num.length(); i++)
        res = (res * 10 + num[i] - '0') % aa;
 
    return res;
}

bool cmp2(const pair<ll,string>&a, const pair<ll,string>&b)
{
    if(a.first==b.first) return (b.second < a.second);
}
string addStrings(string x, string y) {
        string ans="";
        int flag=0;
        int i;
        string str1="";
        int j=0;
        while(x[j]=='0'){
            j++;
        }
        while(j<x.size()){
            str1+=x[j];
            j++;
        }
        string str2="";
        j=0;
        while(y[j]=='0'){
            j++;
        }
        while(j<y.size()){
            str2+=y[j];
            j++;
        }
        i=str1.size()-1,j=str2.size()-1;
        if(str1.size()==0 and str2.size()==0){
            return "0";
        }
        while(i>=0 or j>=0){
            if(i>=0 and j>=0){
                int r=(str1[i]-'0')+(str2[j]-'0');
                r+=flag;
                flag=r/10;
                string res=to_string(r%10);
                ans+=res;
                i--;
                j--;
            }
            else if(j>=0){
                int r=(str2[j]-'0')+flag;
                flag=r/10;
                ans+=to_string(r%10);
                j--;
            }
            else if(i>=0){
                int r=(str1[i]-'0')+flag;
                flag=r/10;
                ans+=to_string(r%10);
                i--;
            }
        }
        if(flag>0){
            ans+=to_string(flag);
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }

bool is_sbsq(string child,string parent,int m,int n)
{
 
    if (m == 0)
        return true;
    if (n == 0)
        return false;
 
  
    if (child[m - 1] == parent[n - 1])
        return is_sbsq(child, parent, m - 1, n - 1);
 
    
    return is_sbsq(child, parent, m, n - 1);
}

ll f(string &s,char ch){
	if(s.size()==1){
		if(s[0]!=ch) return 1;
		return 0;
	}
	ll mid=s.size()/2;
	string str1=s.substr(0,mid);
	string str2=s.substr(mid);
	ll cnt1=f(str1,ch+1)+(mid-count(s.begin()+mid,s.end(),ch));
	ll cnt2=f(str2,ch+1)+(mid-count(s.begin(),s.begin()+mid,ch));
	return min(cnt1,cnt2);
}

bool isValid(string s) {
       stack<char>st;
        for(int i=0;i<s.size();++i){
            if(s[i]=='('||s[i]=='{'||s[i]=='[')
                st.push(s[i]);
            
            else
            {
                if(st.empty())
                   return 0;
                    char x=st.top();
                    st.pop();
                    if(s[i]==')'&& x=='('||s[i]=='}' && x=='{' || s[i]==']' && x=='['){
                       continue;
                }
                else
                    return 0;        
            
        }
            }
        
        if(st.empty())
            return true;
        
        else return 0;
        
    }
    
bool palin(string arr){
   
    int n = arr.size();
    int flag = 0;
 
    for (int i = 0; i <= n / 2 && n != 0; i++) {
 
        
        if (arr[i] != arr[n - i - 1]) {
           return false;
        }
        return true;
}
}

void mr_kamran(){
    
ll n;
cin>>n;
ll x = 0;
for(int i = 0;i<n;++i)
{
    string s;
    cin>>s;
    if(s[0]=='+'||s[s.size()-1]=='+') x++;
    else x--;
}
cout<<x<<an;

}
int main(){
    
FULL_THROTTLE
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);

//__test{
   
  mr_kamran();   
//}

	return 0;
}
